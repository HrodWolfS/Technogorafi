generator client {
  provider        = "prisma-client-js"
  output          = "../lib/generated/prisma"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String    @default("Anonymous")
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(ADMIN)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
}

model Article {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  excerpt     String
  content     String
  image       String?
  status      Status    @default(DRAFT)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  publishedAt DateTime?
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  comments    Comment[]
  stats       Stat[]
  views       View[]
  tags        Tag[]     @relation("ArticleTags")

  @@index([categoryId])
  @@index([status, publishedAt])
  @@index([slug])
}

model Comment {
  id        String   @id @default(cuid())
  name      String
  email     String
  content   String
  approved  Boolean  @default(false)
  articleId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([approved, createdAt])
  @@index([articleId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now())
  articles  Article[]
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  system    Boolean   @default(false)
  createdAt DateTime  @default(now())
  articles  Article[] @relation("ArticleTags")
}

model Stat {
  id        String   @id @default(cuid())
  articleId String?
  path      String
  referrer  String?
  ip        String?
  userAgent String?
  duration  Int?
  createdAt DateTime @default(now())
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([articleId])
  @@index([path])
}

model View {
  id        String   @id @default(cuid())
  articleId String
  ipHash    String   @default("")
  createdAt DateTime @default(now())
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([articleId])
  @@index([createdAt])
  @@index([ipHash])
}

enum Role {
  ADMIN
  EDITOR
  AUTHOR
  VIEWER
}

enum Status {
  DRAFT
  PUBLISHED
  SCHEDULED
}
