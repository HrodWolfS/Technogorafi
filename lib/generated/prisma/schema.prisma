generator client {
  provider        = "prisma-client-js"
  output          = "../lib/generated/prisma"
  previewFeatures = ["driverAdapters"]
  binaryTargets   = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// --- BETTER AUTH SCHEMA ---

model User {
  id            String   @id @default(cuid())
  name          String   @default("Anonymous")
  email         String?  @unique
  emailVerified Boolean?
  image         String?
  role          Role     @default(ADMIN)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  accounts Account[]

  @@map("user")
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  providerId            String
  accountId             String
  scope                 String?
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([providerId, accountId])
  @@index([userId])
  @@map("account")
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@map("verification")
}

// --- APPLICATION SCHEMA ---

model Article {
  id          String    @id @default(cuid())
  title       String
  slug        String    @unique
  excerpt     String
  content     String
  image       String?
  status      Status    @default(DRAFT)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  scheduledAt DateTime?
  publishedAt DateTime?
  categoryId  String?
  category    Category? @relation(fields: [categoryId], references: [id])
  comments    Comment[]
  stats       Stat[]
  views       View[]
  tags        Tag[]     @relation("ArticleTags")

  @@index([categoryId])
  @@index([status, publishedAt])
  @@index([slug])
}

model Comment {
  id        String   @id @default(cuid())
  name      String
  email     String
  content   String
  approved  Boolean  @default(false)
  articleId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([approved, createdAt])
  @@index([articleId])
}

model Category {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  createdAt DateTime  @default(now())
  articles  Article[]
}

model Tag {
  id        String    @id @default(cuid())
  name      String    @unique
  slug      String    @unique
  system    Boolean   @default(false)
  createdAt DateTime  @default(now())
  articles  Article[] @relation("ArticleTags")
}

model Stat {
  id        String   @id @default(cuid())
  articleId String?
  path      String
  referrer  String?
  ip        String?
  userAgent String?
  duration  Int?
  createdAt DateTime @default(now())
  article   Article? @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([articleId])
  @@index([path])
}

model View {
  id        String   @id @default(cuid())
  articleId String
  ipHash    String   @default("")
  createdAt DateTime @default(now())
  article   Article  @relation(fields: [articleId], references: [id], onDelete: Cascade)

  @@index([articleId])
  @@index([createdAt])
  @@index([ipHash])
}

enum Role {
  ADMIN
  EDITOR
  AUTHOR
  VIEWER
}

enum Status {
  DRAFT
  PUBLISHED
  SCHEDULED
}
